name: Generate Changelog and PR

on:
  push:
    branches:
      - 'feat/PF-*'
      - 'fix/PF-*'

jobs:
  prepare-to-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Fetch HML and Generate Categorized Changelog
        id: changelog
        run: |
          echo "üîÑ Iniciando processo de gera√ß√£o de changelog..."

          git fetch origin hml

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          CURRENT_HEAD=$(git rev-parse HEAD)
          HML_COMMIT=$(git rev-parse origin/hml)
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          COMMITS_AHEAD=$(git rev-list --count origin/hml..HEAD)

          echo "üìç Branch atual: $CURRENT_BRANCH"
          echo "üî® HEAD ($CURRENT_BRANCH): $CURRENT_HEAD"
          echo "üéØ Target (origin/hml): $HML_COMMIT"
          echo "üë§ Autor: $AUTHOR_NAME"
          echo "üì¶ Commits √† frente: $COMMITS_AHEAD"

          echo "üìù Coletando commits entre '$CURRENT_BRANCH' e 'origin/hml'..."
          commits=$(git log origin/hml..HEAD --pretty=format:"%s")

          if [ -z "$commits" ]; then
            echo "‚úÖ Nenhum commit novo encontrado. PR n√£o ser√° criado."
            echo "skip_pr=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Classifica√ß√£o dos commits
          feats=""
          fixes=""
          chores=""
          breaks=""

          echo "üìä Classificando commits..."
          while IFS= read -r line; do
            if [[ $line == feat* ]]; then
              feats+="- ${line}\n"
            elif [[ $line == fix* ]]; then
              fixes+="- ${line}\n"
            elif [[ $line == chore* ]]; then
              chores+="- ${line}\n"
            elif [[ $line == *BREAKING* ]]; then
              breaks+="- ${line}\n"
            fi
          done <<< "$commits"

          echo "‚úÖ Commits classificados!"

          # Vari√°vel para descri√ß√£o personalizada (voc√™ pode alterar essa string abaixo)
          custom_description="Este PR foi gerado automaticamente ap√≥s push na branch feature/corre√ß√£o. Por favor, revise com aten√ß√£o. üßê"

          # Metadados do PR
          metadata="\
          ### üìå Informa√ß√µes do PR

          - üë§ **Autor do push:** $AUTHOR_NAME
          - üåø **Branch source:** \`$CURRENT_BRANCH\`
          - üéØ **Branch target:** \`hml\`
          - üì¶ **Commits √† frente de 'hml':** $COMMITS_AHEAD
          - üß± **HEAD atual:** \`$CURRENT_HEAD\`
          - üß± **√öltimo commit em 'hml':** \`$HML_COMMIT\`"

          # Changelog formatado
          formatted="## üìù Changelog Gerado Automaticamente\n\n"
          [ -n "$feats" ] && formatted+="### üì¶ Feats\n\n$(echo -e "$feats")\n"
          [ -n "$fixes" ] && formatted+="### üõ† Fixes\n\n$(echo -e "$fixes")\n"
          [ -n "$chores" ] && formatted+="### üîß Chores\n\n$(echo -e "$chores")\n"
          [ -n "$breaks" ] && formatted+="### üí• Breaking Changes\n\n$(echo -e "$breaks")\n"

          # Corpo do PR
          pr_body="\
          $custom_description

          $metadata

          ---

          $formatted"

          echo "skip_pr=false" >> "$GITHUB_OUTPUT"
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo "$pr_body" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          # Extrair c√≥digo PF-xxxx da branch
          TICKET=$(echo "$CURRENT_BRANCH" | grep -oE 'PF-[0-9]{4}')
          echo "ticket=$TICKET" >> "$GITHUB_OUTPUT"

      - name: Instalar GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Criar ou Atualizar Pull Request com GitHub CLI
        if: steps.changelog.outputs.skip_pr == 'false'
        run: |
          echo "üîç Verificando se j√° existe PR da branch atual para 'hml'..."

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "üìç Branch atual: $CURRENT_BRANCH"

          TICKET=${{ steps.changelog.outputs.ticket }}
          PR_TITLE="[$TICKET] - PR Autom√°tico üöÄ‚ú®"

          # Salva body formatado com changelog e descri√ß√£o extra
          echo "## üìù Atualiza√ß√µes desta entrega autom√°tica" > pr_body.md
          echo "" >> pr_body.md
          echo "${{ steps.changelog.outputs.extra_description }}" >> pr_body.md
          echo "" >> pr_body.md
          echo "---" >> pr_body.md
          echo "" >> pr_body.md
          echo "${{ steps.changelog.outputs.changelog }}" >> pr_body.md

          # Verifica se j√° existe um PR da branch atual para 'hml'
          EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --base "hml" --state open --json number --jq '.[0].number')

          if [ -n "$EXISTING_PR" ]; then
            echo "‚úèÔ∏è PR j√° existe (#$EXISTING_PR), atualizando body..."
            gh pr edit "$EXISTING_PR" --body-file pr_body.md
          else
            echo "üöÄ PR n√£o encontrado, criando novo..."
            gh pr create \
              --title "$PR_TITLE" \
              --body-file pr_body.md \
              --head "$CURRENT_BRANCH" \
              --base hml \
              --label "auto-pr,review-needed" \
              --reviewer "username-1"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}


