name: Generate Changelog and PR

on:
  push:
    branches:
      - 'feat/PF-*'
      - 'fix/PF-*'

jobs:
  prepare-to-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Fetch HML and Generate Categorized Changelog
        id: changelog
        run: |
          echo "üîÑ Iniciando processo de gera√ß√£o de changelog..."

          git fetch origin hml

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          CURRENT_HEAD=$(git rev-parse HEAD)
          HML_COMMIT=$(git rev-parse origin/hml)
          COMMITS_AHEAD=$(git rev-list --count origin/hml..HEAD)

          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          LAST_HML_COMMIT=$(git log origin/hml -1 --pretty=format:'%h')

          echo "üìç Branch atual: $CURRENT_BRANCH"
          echo "üî® HEAD: $CURRENT_HEAD"
          echo "üéØ Target: $HML_COMMIT"
          echo "üë§ Autor: $AUTHOR_NAME"

          commits=$(git log origin/hml..HEAD --pretty=format:"%h|%ad|%s" --date=short)

          if [ -z "$commits" ]; then
            echo "‚úÖ Nenhum commit novo encontrado. PR n√£o ser√° criado."
            echo "skip_pr=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          feats=""
          fixes=""
          chores=""
          breaks=""

          while IFS= read -r line; do
            hash=$(echo "$line" | cut -d'|' -f1)
            date=$(echo "$line" | cut -d'|' -f2)
            message=$(echo "$line" | cut -d'|' -f3)

            if [[ $message == feat* ]]; then
              feats+="- $message\n"
            elif [[ $message == fix* ]]; then
              fixes+="- $message\n"
            elif [[ $message == chore* ]]; then
              chores+="- $message\n"
            elif [[ $message == *BREAKING* ]]; then
              breaks+="- $message\n"
            fi

            changelog_updates+="UPDATE [$date] - ${hash:0:6} - $message\n"
          done <<< "$commits"

          changelog=""
          [ -n "$feats" ] && changelog+="### üì¶ Feats\n$feats\n"
          [ -n "$fixes" ] && changelog+="### üõ† Fixes\n$fixes\n"
          [ -n "$chores" ] && changelog+="### üîß Chores\n$chores\n"
          [ -n "$breaks" ] && changelog+="### üí• Breaking Changes\n$breaks\n"

          body_md=""
          body_md+="Este PR foi gerado automaticamente ap√≥s push na branch feature/corre√ß√£o. Por favor, revise com aten√ß√£o. üßê\n\n"
          body_md+="## üìå Informa√ß√µes do PR\n"
          body_md+="- üßë‚Äçüíª Autor do push: $AUTHOR_NAME\n"
          body_md+="- üåø Branch source: $CURRENT_BRANCH\n"
          body_md+="- üéØ Branch target: hml\n"
          body_md+="- üì¶ Commits √† frente de 'hml': $COMMITS_AHEAD commits\n"
          body_md+="- üß† HEAD atual: $CURRENT_HEAD\n"
          body_md+="- üß± √öltimo commit em 'hml': $LAST_HML_COMMIT\n\n"
          body_md+="---\n\n"
          body_md+="## üÜï Atualiza√ß√µes\n$changelog_updates\n"
          body_md+="\n$changelog"

          echo "skip_pr=false" >> "$GITHUB_OUTPUT"
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo "$body_md" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Instalar GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Criar ou Atualizar Pull Request
        if: steps.changelog.outputs.skip_pr == 'false'
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          TITLE_ID=$(echo "$BRANCH" | grep -o 'PF-[0-9]*')
          TITLE="[$TITLE_ID] - ü§ñ PR Autom√°tico"

          gh pr list --head "$BRANCH" --base hml --json number --jq '.[0].number' > pr_number.txt || true
          PR_NUMBER=$(cat pr_number.txt)

          echo "## Gerando corpo do PR"
          echo "${{ steps.changelog.outputs.changelog }}" > pr_body.md

          if [ -n "$PR_NUMBER" ]; then
            echo "‚úèÔ∏è Atualizando PR existente #$PR_NUMBER"
            gh pr edit "$PR_NUMBER" \
              --title "$TITLE" \
              --body-file pr_body.md
          else
            echo "üöÄ Criando novo PR"
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --head "$BRANCH" \
              --base hml \
              --label "auto-pr" \
              --reviewer "wm-lim4mik3"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}
