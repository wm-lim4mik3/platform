name: Generate Changelog and PR

on:
  push:
    branches:
      - 'feat/PF-*'
      - 'fix/PF-*'

jobs:
  prepare-to-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Busca todo o hist√≥rico de commits

      - name: Fetch HML and Generate Changelog
        id: changelog
        run: |
          echo "üîÑ Iniciando processo de gera√ß√£o de changelog..."

          git fetch origin hml

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          CURRENT_HEAD=$(git rev-parse HEAD)
          HML_COMMIT=$(git rev-parse origin/hml)
          COMMITS_AHEAD=$(git rev-list --count origin/hml..HEAD)
          AUTHORS=$(git log origin/hml..HEAD --pretty=format:'%an' | sort | uniq | paste -sd, -)

          printf "üìç Branch atual: %s\n" "$CURRENT_BRANCH"
          printf "üî® HEAD (%s): %s\n" "$CURRENT_BRANCH" "$CURRENT_HEAD"
          printf "üéØ Target (origin/hml): %s\n" "$HML_COMMIT"

          commits=$(git log origin/hml..HEAD --pretty=format:"%h|%s|%an|%ad" --date=short)

          if [ -z "$commits" ]; then
            echo "‚úÖ Nenhum commit novo encontrado em rela√ß√£o √† HML. PR n√£o ser√° criado."
            echo "skip_pr=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          TICKET_ID=$(echo "$CURRENT_BRANCH" | grep -o 'PF-[0-9]\+')

          changelog_body="## üì¶ Atualiza√ß√µes desta entrega autom√°tica\n\n"
          changelog_body+="Este PR foi gerado automaticamente ap√≥s o push da branch $CURRENT_BRANCH. Por favor, revise com aten√ß√£o. üßê\n\n"

          if [ -n "$TICKET_ID" ]; then
            changelog_body+="Detectado pelo nome da branch que pode ter um ticket aberto para essa demanda, acesse em: [$TICKET_ID](https://webmotors.atlassian.net/browse/$TICKET_ID)\n\n"
          fi

          changelog_body+="### üìå Informa√ß√µes do PR\n"
          changelog_body+="- üë§ **Autores do push:** $AUTHORS\n"
          changelog_body+="- üåø **Branch source:** $CURRENT_BRANCH\n"
          changelog_body+="- üéØ **Branch target:** hml\n"
          changelog_body+="- üì¶ **Commits √† frente de 'hml':** $COMMITS_AHEAD\n"
          changelog_body+="- üß† **HEAD atual:** $CURRENT_HEAD\n"
          changelog_body+="- üß± **√öltimo commit em 'hml':** $HML_COMMIT\n\n"
          changelog_body+="### üÜï Hist√≥rico de atualiza√ß√µes\n\n"

          # Inicializar se√ß√µes por tipo de commit
          declare -A commit_types
          commit_types=(
            ["feat"]="Feats"
            ["fix"]="Fixes"
            ["breaking"]="Breaking Changes"
            ["docs"]="Docs"
            ["chore"]="Chores"
            ["test"]="Tests"
            ["refactor"]="Refactors"
            ["style"]="Styles"
            ["ci"]="CI"
          )

          # Inicializar todas as se√ß√µes como vazias
          for type in "${!commit_types[@]}"; do
            eval "${type}_commits=''"
          done

          # Processar commits e classific√°-los por tipo
          while IFS= read -r line; do
            IFS='|' read -r hash subject author date <<< "$line"
            if [ -n "$hash" ] && [ -n "$subject" ] && [ -n "$author" ] && [ -n "$date" ]; then
              # Extrair o tipo do commit (ex.: feat, fix) da mensagem do commit
              commit_type=$(echo "$subject" | grep -oE '^(feat|fix|breaking|docs|chore|test|refactor|style|ci)(\([^)]+\))?:' | sed 's/(\([^)]*\))//g' | sed 's/:$//')
              if [ -z "$commit_type" ]; then
                commit_type="chore"  # Default para commits sem tipo expl√≠cito
              fi

              # Pegar os primeiros 6 caracteres do hash
              short_hash=$(echo "$hash" | cut -c 1-6)

              # Escapar caracteres '#' na mensagem do commit para evitar que o Markdown interprete como cabe√ßalho
              escaped_subject=$(echo "$subject" | sed 's/#/\\#/g')
              commit_message="$escaped_subject ($short_hash) - $author"

              # Adicionar o commit √† se√ß√£o correspondente
              if [ -n "${commit_types[$commit_type]}" ]; then
                eval "${commit_type}_commits+='\n- ${commit_type}: ${commit_message}'"
              fi
            else
              echo "‚ö†Ô∏è Aviso: Linha ignorada devido a valores vazios (hash: '$hash', subject: '$subject', author: '$author', date: '$date')"
            fi
          done <<< "$commits"

          # Adicionar as se√ß√µes ao changelog_body
          for type in "${!commit_types[@]}"; do
            eval "section_commits=\$${type}_commits"
            if [ -n "$section_commits" ]; then
              changelog_body+="#### ${commit_types[$type]}\n$section_commits\n\n"
            fi
          done

          echo "skip_pr=false" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Instalar GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Criar Labels se N√£o Existirem
        run: |
          echo "üîß Criando labels 'auto-pr' e 'needs-review' se n√£o existirem..."
          gh label create "auto-pr" --description "PRs autom√°ticos gerados pelo CI" --color "00FF00" || echo "Label 'auto-pr' j√° existe"
          gh label create "needs-review" --description "PRs que precisam de revis√£o" --color "FF9900" || echo "Label 'needs-review' j√° existe"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Criar ou Atualizar Pull Request com GitHub CLI
        if: steps.changelog.outputs.skip_pr == 'false'
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PR_TITLE="[$(echo "$CURRENT_BRANCH" | grep -o 'PF-[0-9]\+')]- ü§ñ PR Autom√°tico"

          echo "üîç Verificando se j√° existe PR da branch '$CURRENT_BRANCH' para 'hml'..."
          EXISTING_PR_URL=$(gh pr list --base hml --head "$CURRENT_BRANCH" --json url --jq '.[0].url')

          if [ -n "$EXISTING_PR_URL" ]; then
            echo "‚úèÔ∏è PR encontrado, atualizando body..."
            gh pr edit "$EXISTING_PR_URL" --body "${{ steps.changelog.outputs.changelog }}"
          else
            echo "üöÄ PR n√£o encontrado, criando novo..."
            gh pr create \
              --title "$PR_TITLE" \
              --body "${{ steps.changelog.outputs.changelog }}" \
              --head "$CURRENT_BRANCH" \
              --base hml \
              --label "auto-pr,needs-review"
              # --reviewer "wm-lim4mik3"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}