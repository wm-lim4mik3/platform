name: Create automatic PR to HML

on:
  push:
    branches:
      - 'feat/PF-*'
      - 'fix/PF-*'

jobs:
  create_automatic_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch HML and Generate Changelog
        id: changelog
        run: |
          echo "üîÑ Iniciando processo de gera√ß√£o de changelog..."

          git fetch origin hml

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          CURRENT_HEAD=$(git rev-parse HEAD)
          HML_COMMIT=$(git rev-parse origin/hml)
          COMMITS_AHEAD=$(git rev-list --count origin/hml..HEAD)
          AUTHORS=$(git log origin/hml..HEAD --pretty=format:'%an' | sort | uniq | paste -sd, -)

          commits=$(git log origin/hml..HEAD --pretty=format:"%h|%s|%an|%ad" --date=short)

          # Check for [skip pr] in commit messages
          SKIP_PR=$(git log origin/hml..HEAD --pretty=format:"%s" | grep -qi "\[skip pr\]" && echo "true" || echo "false")
          if [ "$SKIP_PR" = "true" ]; then
            echo "üö´ Encontrado '[skip pr]' na mensagem de commit. Pulando cria√ß√£o de changelog e PR."
            echo "skip_pr=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ -z "$commits" ]; then
            echo "‚úÖ Nenhum commit novo encontrado em rela√ß√£o √† HML. PR n√£o ser√° criado."
            echo "skip_pr=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          TICKET_ID=$(echo "$CURRENT_BRANCH" | grep -o 'PF-[0-9]\+')

          {
            echo "## üì¶ Atualiza√ß√µes desta entrega autom√°tica"
            echo ""
            echo "Este PR foi gerado automaticamente ap√≥s o push da branch \`$CURRENT_BRANCH\`. Por favor, revise com aten√ß√£o. üßê"
            echo ""

            if [ -n "$TICKET_ID" ]; then
              echo "Detectado pelo nome da branch que pode ter um ticket aberto para essa demanda, acesse em: [$TICKET_ID](https://webmotors.atlassian.net/browse/$TICKET_ID)"
              echo ""
            fi

            echo "### üìå Informa√ß√µes do PR"
            echo "- üë§ **Autores:** $AUTHORS"
            echo "- üåø **Branch source:** \`$CURRENT_BRANCH\`"
            echo "- üéØ **Branch target:** \`hml\`"
            echo "- üì¶ **Commits √† frente de 'hml':** $COMMITS_AHEAD commits"
            echo "- üß† **HEAD atual:** \`$CURRENT_HEAD\`"
            echo "- üß± **√öltimo commit em 'hml':** \`$HML_COMMIT\`"
            echo ""
            echo "### üÜï Hist√≥rico de atualiza√ß√µes"
            echo ""

            declare -A commit_types
            commit_types=(["feat"]="Feats" ["fix"]="Fixes" ["breaking"]="Breaking Changes" ["docs"]="Docs" ["chore"]="Chores" ["test"]="Tests" ["refactor"]="Refactors" ["style"]="Styles" ["ci"]="CI")

            for type in "${!commit_types[@]}"; do
              eval "${type}_commits=''"
            done

            while IFS= read -r line; do
              IFS='|' read -r hash subject author date <<< "$line"
              if [ -n "$hash" ] && [ -n "$subject" ] && [ -n "$author" ] && [ -n "$date" ]; then
                commit_type=$(echo "$subject" | grep -oE '^(feat|fix|breaking|docs|chore|test|refactor|style|ci)(\([^)]+\))?:' | sed 's/(\([^)]*\))//g' | sed 's/:$//')
                if [ -z "$commit_type" ]; then
                  commit_type="chore"
                fi

                # Remove the commit type prefix from the subject
                clean_subject=$(echo "$subject" | sed -E 's/^(feat|fix|breaking|docs|chore|test|refactor|style|ci)(\([^)]+\))?:[[:space:]]*//')
                escaped_subject=$(echo "$clean_subject" | sed 's/[#`*]/\\&/g' | sed 's/"/\\"/g')
                commit_message="$escaped_subject (\`$hash\`) - $author"
                if [ -n "${commit_types[$commit_type]}" ]; then
                  eval "${commit_type}_commits+='\n- ${commit_message}'"
                fi
              fi
            done <<< "$commits"

            for type in "${!commit_types[@]}"; do
              eval "section_commits=\$${type}_commits"
              if [ -n "$section_commits" ]; then
                echo "#### ${commit_types[$type]}"
                echo -e "$section_commits"
                echo ""
              fi
            done
          } > changelog_body.md

          echo "skip_pr=false" >> $GITHUB_OUTPUT

      - name: Installing GitHub CLI
        if: steps.changelog.outputs.skip_pr == 'false'
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Create or Update PR
        if: steps.changelog.outputs.skip_pr == 'false'
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PR_TITLE="[$(echo "$CURRENT_BRANCH" | grep -o 'PF-[0-9]\+')] - ü§ñ PR Autom√°tico"

          EXISTING_PR_URL=$(gh pr list --base hml --head "$CURRENT_BRANCH" --json url --jq '.[0].url')

          if [ -n "$EXISTING_PR_URL" ]; then
            echo "‚úèÔ∏è Atualizando PR existente..."
            gh pr edit "$EXISTING_PR_URL" --body-file changelog_body.md
            echo "pr_url=$EXISTING_PR_URL" >> $GITHUB_OUTPUT
          else
            echo "üöÄ Criando novo PR..."
            PR_URL=$(gh pr create \
              --title "$PR_TITLE" \
              --body-file changelog_body.md \
              --head "$CURRENT_BRANCH" \
              --base hml \
              --label "auto-pr,needs-review"
              )
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}